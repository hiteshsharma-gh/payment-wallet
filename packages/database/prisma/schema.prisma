datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  name           String?
  hashedPassword String?
  googleId       String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  verified       Boolean        @default(false)
  role           UserRole       @default(USER)
  refreshTokens  RefreshToken[]
  accessTokens   AccessToken[]
  transactions   Transaction[]  @relation("UserTransactions")
}

model Merchant {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  hashedPassword String
  businessType   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isActive       Boolean        @default(true)
  refreshTokens  RefreshToken[]
  accessTokens   AccessToken[]
  transactions   Transaction[]  @relation("MerchantTransactions")
}

model RefreshToken {
  id         String    @id @default(uuid())
  token      String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  userId     String?
  merchantId String?
  user       User?     @relation(fields: [userId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  @@index([userId])
  @@index([merchantId])
}

model AccessToken {
  id         String    @id @default(uuid())
  token      String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  userId     String?
  merchantId String?
  user       User?     @relation(fields: [userId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  @@index([userId])
  @@index([merchantId])
}

model Transaction {
  id         String            @id @default(uuid())
  amount     Decimal
  currency   String
  status     TransactionStatus
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  userId     String
  merchantId String
  user       User              @relation("UserTransactions", fields: [userId], references: [id])
  merchant   Merchant          @relation("MerchantTransactions", fields: [merchantId], references: [id])

  @@index([userId])
  @@index([merchantId])
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
